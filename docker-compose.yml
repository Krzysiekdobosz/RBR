version: '3.8'

services:
  # Aplikacja Laravel
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rbr-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - rbr-network
    depends_on:
      - db
      - redis

  # Nginx
  webserver:
    image: nginx:alpine
    container_name: rbr-webserver
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - rbr-network
    depends_on:
      - app

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: rbr-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: rbr_database
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: rbr_user
      MYSQL_PASSWORD: rbr_password
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - rbr-network

  # Redis
  redis:
    image: redis:alpine
    container_name: rbr-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - rbr-network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rbr-queue
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90
    networks:
      - rbr-network
    depends_on:
      - db
      - redis

  # Scheduler (Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rbr-scheduler
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    networks:
      - rbr-network
    depends_on:
      - db
      - redis

  # MailHog (do testowania maili)
  mailhog:
    image: mailhog/mailhog
    container_name: rbr-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - rbr-network

volumes:
  db_data:
  redis_data:

networks:
  rbr-network:
    driver: bridge